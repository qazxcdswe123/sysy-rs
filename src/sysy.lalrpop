/// CompUnit  ::= FuncDef;
///
/// FuncDef   ::= FuncType IDENT "(" ")" Block;
/// FuncType  ::= "int";
///
/// Block     ::= "{" Stmt "}";
/// Stmt        ::= "return" Exp ";";
/// Exp         ::= LOrExp;
/// PrimaryExp  ::= "(" Exp ")" | Number;
/// Number      ::= INT_CONST;
/// UnaryExp    ::= PrimaryExp | UnaryOp UnaryExp;
/// UnaryOp     ::= "+" | "-" | "!";
/// MulExp      ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
/// AddExp      ::= MulExp | AddExp ("+" | "-") MulExp;
/// RelExp      ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
/// EqExp       ::= RelExp | EqExp ("==" | "!=") RelExp;
/// LAndExp     ::= EqExp | LAndExp "&&" EqExp;
/// LOrExp      ::= LAndExp | LOrExp "||" LAndExp;

// lalrpop 里的约定
grammar;

use crate::ast::*;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 块注释
  r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = {
  "return" <exp: Exp> ";" => Stmt::Return(<>)
};

Exp: Exp = {
  <lor_exp: LOrExp> => Exp::LOrExp(<>)
};

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::ParenExp(Box::new(<>)),
  Number => PrimaryExp::Number(<>),
};

UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(<>),
  "+" <unary_exp: UnaryExp> => UnaryExp::PlusUnaryExp(Box::new(<>)),
  "-" <unary_exp: UnaryExp> => UnaryExp::MinusUnaryExp(Box::new(<>)),
  "!" <unary_exp: UnaryExp> => UnaryExp::NotUnaryExp(Box::new(<>)),
};

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(<>),
  <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp::BinaryAddExp(Box::new(add_exp), mul_exp),
  <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp::BinarySubExp(Box::new(add_exp), mul_exp),
};

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(<>),
  <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp::BinaryMulExp(Box::new(mul_exp), unary_exp),
  <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => MulExp::BinaryDivExp(Box::new(mul_exp), unary_exp),
  <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => MulExp::BinaryModExp(Box::new(mul_exp), unary_exp),
};

LOrExp: LOrExp = {
  <land_exp: LAndExp> => LOrExp::LAndExp(<>),
  <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::BinaryLOrExp(Box::new(lor_exp), land_exp),
};

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp(<>),
  <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::BinaryLAndExp(Box::new(land_exp), eq_exp),
};

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp(<>),
  <eq_exp: EqExp> "==" <rel_exp: RelExp> => EqExp::BinaryEqExp(Box::new(eq_exp), rel_exp),
  <eq_exp: EqExp> "!=" <rel_exp: RelExp> => EqExp::BinaryNeExp(Box::new(eq_exp), rel_exp),
};

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp(<>),
  <rel_exp: RelExp> "<" <add_exp: AddExp> => RelExp::BinaryLtExp(Box::new(rel_exp), add_exp),
  <rel_exp: RelExp> ">" <add_exp: AddExp> => RelExp::BinaryGtExp(Box::new(rel_exp), add_exp),
  <rel_exp: RelExp> "<=" <add_exp: AddExp> => RelExp::BinaryLeExp(Box::new(rel_exp), add_exp),
  <rel_exp: RelExp> ">=" <add_exp: AddExp> => RelExp::BinaryGeExp(Box::new(rel_exp), add_exp),
};

Number: Number = {
  <int_const: IntConst> => Number::IntConst(<>)
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}