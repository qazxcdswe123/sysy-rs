use koopa::ir::types::TypeKind;

// lalrpop 里的约定
grammar;

use crate::ast::*;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 块注释
  r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <units: (Unit)*> => CompUnit { <> };

pub Unit: Unit = {
  <d: Decl> => Unit::Decl(<>),
  <f: FuncDef> => Unit::FuncDef(<>),
};

FuncDef: FuncDef = {
  <func_type: BType> <ident: IDENT> "(" <params: (FuncParams)?> ")" <block: Block> => {
    // FuncDef { <> }
    FuncDef { func_type, ident, params: params.unwrap_or(Vec::new()), block }
  }
};

FuncFParam: FuncFParam = {
  <btype: BType> <ident: IDENT> => FuncFParam { btype, ident }
};

FuncParams: Vec<FuncFParam> = <p: FuncFParam> <ps: ("," <FuncFParam>)*> => {
  let mut vec = Vec::<FuncFParam>::new();
  vec.push(p);
  for p in ps {
    vec.push(p);
  }
  vec
};

FuncRPrams: Vec<Exp> = <exp: Exp> <exps: ("," <Exp>)*> => {
  let mut vec = Vec::<Exp>::new();
  vec.push(exp);
  for e in exps {
    vec.push(e);
  }
  vec
};

BType: BType = {
  "int" => BType { ty: TypeKind::Int32 },
  "void" => BType { ty: TypeKind::Unit },
};

Block: Block = "{" <items: ( BlockItem )*> "}" => Block { <> };

BlockItem: BlockItem = {
  <stmt: Stmt> => BlockItem::Stmt(<>),
  <decl: Decl> => BlockItem::Decl(<>),
};

Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl(<>),
  <var_decl: VarDecl> => Decl::VarDecl(<>),
};

VarDecl: VarDecl = <btype: BType> <var_def: VarDef> <defs: ("," <VarDef>)*> ";" => {
  let mut var_defs = Vec::<VarDef>::new();
  var_defs.push(var_def);
  for d in defs {
    var_defs.push(d);
  }
  VarDecl {btype, var_defs}
};

VarDef: VarDef = {
  <ident: IDENT> <init: ("="  <InitVal>)?> => VarDef{ident, init}
};

InitVal: InitVal = {
  <exp: Exp> => InitVal::Exp(<>),
};

ConstDef: ConstDef = <ident: IDENT> "=" <const_init_val: ConstInitVal> => ConstDef{ident, const_init_val};

ConstInitVal: ConstInitVal = <exp: ConstExp> => ConstInitVal::ConstExp(<>);

ConstExp: ConstExp = <exp: Exp> => ConstExp{ <> };

ConstDecl: ConstDecl = "const" <btype: BType> <const_def: ConstDef> <defs: ("," <ConstDef>)*> ";" => {
  let mut const_defs = Vec::<ConstDef>::new();
  const_defs.push(const_def);
  for d in defs {
    const_defs.push(d);
  }
  ConstDecl {btype, const_defs}
};

Stmt: Stmt = {
  <us: UnmatchedStmt> => Stmt::UnmatchedStmt(<>),
  <ms: MatchedStmt> => Stmt::MatchedStmt(<>),
};

UnmatchedStmt: UnmatchedStmt = {
  "if" "(" <exp: Exp> ")" <ms: MatchedStmt> => UnmatchedStmt{stmt: BasicStmt::IfElseStmt(exp, Box::new(ms.stmt), Box::new(None))}, 
  "if" "(" <exp: Exp> ")" <ums: UnmatchedStmt> => UnmatchedStmt{stmt: BasicStmt::IfElseStmt(exp, Box::new(ums.stmt), Box::new(None))}, 
  "if" "(" <exp: Exp> ")" <ms: MatchedStmt> "else" <ums: UnmatchedStmt> => UnmatchedStmt{stmt: BasicStmt::IfElseStmt(exp, Box::new(ms.stmt), Box::new(Some(ums.stmt)))}, 
  "while" "(" <exp: Exp> ")" <us: UnmatchedStmt> => UnmatchedStmt{stmt: BasicStmt::WhileStmt(exp, Box::new(us.stmt))},
};

MatchedStmt: MatchedStmt = {
  <lval: LVal> "=" <exp: Exp> ";" => MatchedStmt{stmt: BasicStmt::AssignStmt(lval, exp)},
  <exp: (Exp)?> ";" => MatchedStmt{stmt: BasicStmt::ExpStmt(<>)},
  <b: Block> => MatchedStmt{stmt: BasicStmt::BlockStmt(b)},
  "return" <exp: (Exp)?> ";" => MatchedStmt{stmt: BasicStmt::ReturnStmt(<>)},
  "if" "(" <exp: Exp> ")" <s1: MatchedStmt> "else" <s2: MatchedStmt> => MatchedStmt{stmt: BasicStmt::IfElseStmt(exp, Box::new(s1.stmt), Box::new(Some(s2.stmt)))},
  "while" "(" <exp: Exp> ")" <s: MatchedStmt> => MatchedStmt{stmt: BasicStmt::WhileStmt(exp, Box::new(s.stmt))},
  "continue" ";" => MatchedStmt{stmt: BasicStmt::ContinueStmt},
  "break" ";" => MatchedStmt{stmt: BasicStmt::BreakStmt},
};

Exp: Exp = {
  <lor_exp: LOrExp> => Exp::LOrExp(<>),
};

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::ParenExp(Box::new(<>)),
  Number => PrimaryExp::Number(<>),
  LVal => PrimaryExp::LVal(<>),
};

LVal: LVal = <ident: IDENT> => LVal{<>};

UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(<>),
  "+" <unary_exp: UnaryExp> => UnaryExp::PlusUnaryExp(Box::new(<>)),
  "-" <unary_exp: UnaryExp> => UnaryExp::MinusUnaryExp(Box::new(<>)),
  "!" <unary_exp: UnaryExp> => UnaryExp::NotUnaryExp(Box::new(<>)),
  <i: IDENT> "(" <params: (FuncRPrams)?> ")" => UnaryExp::FuncCall(i, params.unwrap_or(Vec::new())),
};

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(<>),
  <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp::BinaryAddExp(Box::new(add_exp), mul_exp),
  <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp::BinarySubExp(Box::new(add_exp), mul_exp),
};

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(<>),
  <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp::BinaryMulExp(Box::new(mul_exp), unary_exp),
  <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => MulExp::BinaryDivExp(Box::new(mul_exp), unary_exp),
  <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => MulExp::BinaryModExp(Box::new(mul_exp), unary_exp),
};

LOrExp: LOrExp = {
  <land_exp: LAndExp> => LOrExp::LAndExp(<>),
  <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::BinaryLOrExp(Box::new(lor_exp), land_exp),
};

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp(<>),
  <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::BinaryLAndExp(Box::new(land_exp), eq_exp),
};

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp(<>),
  <eq_exp: EqExp> "==" <rel_exp: RelExp> => EqExp::BinaryEqExp(Box::new(eq_exp), rel_exp),
  <eq_exp: EqExp> "!=" <rel_exp: RelExp> => EqExp::BinaryNeExp(Box::new(eq_exp), rel_exp),
};

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp(<>),
  <rel_exp: RelExp> "<" <add_exp: AddExp> => RelExp::BinaryLtExp(Box::new(rel_exp), add_exp),
  <rel_exp: RelExp> ">" <add_exp: AddExp> => RelExp::BinaryGtExp(Box::new(rel_exp), add_exp),
  <rel_exp: RelExp> "<=" <add_exp: AddExp> => RelExp::BinaryLeExp(Box::new(rel_exp), add_exp),
  <rel_exp: RelExp> ">=" <add_exp: AddExp> => RelExp::BinaryGeExp(Box::new(rel_exp), add_exp),
};

Number: Number = {
  <int_const: IntConst> => Number::IntConst(<>)
};

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
IDENT: IDENT = r"[_a-zA-Z][_a-zA-Z0-9]*" => IDENT{ id: <>.to_string() };

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};